{"version":3,"sources":["assets/profile.jpg","../node_modules/web3-eth-accounts/src sync","components/Appbar.js","networkutils/networkrequests.js","screens/CandidateRegistration.js","screens/VoterRegistration.js","components/VerificationModal.js","components/Candidate.js","screens/VotingScreen.js","networkutils/getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","webpackEmptyContext","req","e","Error","code","keys","resolve","id","Appbar","props","Box","tag","direction","align","justify","background","pad","left","right","vertical","elevation","style","zIndex","Heading","level","margin","header","fetchQrCode","endpoint","payload","payload_json","JSON","stringify","fetch","method","headers","body","then","res","json","fetchVerificationQrCode","fetchGenerateOtpState","setState","state","setTimeout","postNewCandidateRegistration","REQUEST_URL","theme","global","font","family","size","height","CandidateRegistration","name","politicalParty","constituency","ethWalletAddr","txState","onTxStateChange","Grommet","full","flex","top","gap","TextInput","placeholder","value","this","onChange","event","target","Button","label","disabled","primary","hoverIndicator","onClick","a","walletAddress","response","console","log","sizeUnit","loading","color","Text","weight","React","Component","VoterRegistration","submitPressed","dob","qr","textAlign","alt","src","sityle","width","walletAddr","VerificationModal","marginBottom","otpstate","registerVoteOnBlockchain","candidateWalletAddressSelected","voterAddress","registerVoteOnBlockchainPressed","Candidate","padding","round","border","require","borderRadius","party","onVoteButtonPressed","candidateAddress","VotingScreen","showModal","otpValue","candidates","isRegistered","userConstituency","userHasVoted","componentDidMount","ElectionContract","methods","VoterList","accounts","call","user","getCandidateList","voted","onOtpStateChange","otp","voteForCandidate","send","from","gasPrice","fill","wordWrap","overflow","InfiniteScroll","items","filter","candidate","item","index","key","Layer","onEsc","onClickOutside","getWeb3","Promise","reject","window","addEventListener","ethereum","web3","Web3","enable","provider","providers","HttpProvider","App","showCandidateRegistration","showVoterRegistration","showVotingScreen","contract","eth","getAccounts","net","getId","networkId","deployedNetwork","Elections","networks","instance","Contract","abi","address","error","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.956f51ad.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile.b1f16126.jpg\";","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 375;","import React from \"react\";\nimport { Box, Heading } from \"grommet\";\n\nconst Appbar = props => {\n  return (\n    <Box\n      tag=\"header\"\n      direction=\"row\"\n      align=\"center\"\n      justify=\"between\"\n      background=\"brand\"\n      pad={{ left: \"medium\", right: \"small\", vertical: \"small\" }}\n      elevation=\"medium\"\n      style={{ zIndex: \"1\" }}\n    >\n      <Heading level=\"3\" margin=\"none\">\n        {props.header}\n      </Heading>\n    </Box>\n  );\n};\n\nexport default Appbar;","export const fetchQrCode = (endpoint, payload) => {\n  const payload_json = JSON.stringify(payload);\n  return fetch(endpoint, {\n      method: 'POST',\n      headers: { 'content-type': 'application/json' },\n      body: payload_json\n  })\n  .then(res => res.json())\n  .then(json => json);\n}\n\nexport const fetchVerificationQrCode = (endpoint) => {\n  const REQUEST_URL = endpoint + \"/start-verification\";\n  return fetch(REQUEST_URL)\n  .then(res => {\n    return res.json()\n  })\n  .then(json => {\n    return json\n  });\n}\n\nexport const fetchGenerateOtpState = (endpoint, setState) => {\n  const REQUEST_URL = endpoint + \"/otpstate\";\n  return fetch(REQUEST_URL)\n  .then(res => res.json())\n  .then(json => {\n    if(json.state === \"done\") {\n      setState(json);\n      return;\n    } else {\n      setState(json);\n      setTimeout(() => fetchGenerateOtpState(endpoint, setState), 1000);\n    }\n  });\n}\n\nexport const postNewCandidateRegistration = (endpoint, payload, setState) => {\n  setState(\"started\");\n  const REQUEST_URL = endpoint + \"/registercandidate\"\n  const payload_json = JSON.stringify(payload);\n  return fetch(REQUEST_URL, {\n    method: \"POST\",\n    headers: { \"content-type\": \"application/json\" },\n    body: payload_json\n  })\n  .then(res => res.json())\n  .then(json => {\n    setState(\"done\");\n    return json\n  });\n}","import React from 'react';\nimport { Grommet, Box, TextInput, Button, Text } from 'grommet';\nimport Appbar from \"../components/Appbar\";\nimport { postNewCandidateRegistration } from \"../networkutils/networkrequests\";\nimport ScaleLoader from \"react-spinners/ScaleLoader\";\n\nconst theme = {\n  global: {\n    font: {\n      family: \"Lato\",\n      size: \"14px\",\n      height: \"20px\"\n    }\n  }\n};\n\nclass CandidateRegistration extends React.Component {\n  state = {\n    name: '',\n    politicalParty: '',\n    constituency: '',\n    ethWalletAddr: '',\n    txState: \"not-started\"\n  }\n\n  onTxStateChange = (state) => {\n    this.setState(() => ({ txState: state }));\n  }\n\n  render() {\n    return (\n      <Grommet theme={theme} full>\n        <Appbar header=\"Candidate Registration\" />\n        <Box flex align=\"center\">\n          <Box\n            margin={{ top: \"large\" }}\n            direction=\"row\"\n            gap=\"large\"\n          >\n            <TextInput\n              placeholder=\"Candidate name\"\n              value={this.state.name}\n              onChange={event => this.setState({ name: event.target.value })}\n            />\n            <TextInput\n              placeholder=\"Political Party\"\n              value={this.state.politicalParty}\n              onChange={event => this.setState({ politicalParty: event.target.value })}\n            />\n          </Box>\n          <Box\n            margin={{ top: \"large\" }}\n            direction=\"row\"\n            gap=\"large\"\n          >\n            <TextInput\n              placeholder=\"Constituency\"\n              value={this.state.constituency}\n              onChange={event => this.setState({ constituency: event.target.value })}\n            />\n            <TextInput\n              placeholder=\"Ethereum wallet address\"\n              value={this.state.ethWalletAddr}\n              onChange={event => this.setState({ ethWalletAddr: event.target.value })}\n            />\n          </Box>\n          <Button\n            label=\"Submit\"\n            margin={{ top: \"large\" }}\n            disabled={this.state.txState !== \"not-started\"}\n            primary\n            hoverIndicator=\"background\"\n            onClick={async () => {\n              const response = await postNewCandidateRegistration(\"https://aqueous-peak-76887.herokuapp.com\", {\n                name: this.state.name,\n                constituency: this.state.constituency,\n                politicalParty: this.state.politicalParty,\n                walletAddress: this.state.ethWalletAddr\n              }, this.onTxStateChange);\n              console.log(response);\n            }}\n          />\n          {\n            this.state.txState === \"started\" ? (\n              <Box margin=\"medium\">\n                <ScaleLoader\n                  sizeUnit=\"px\"\n                  size={10}\n                  loading={true}\n                  color=\"#6200ea\"\n                />\n              </Box>\n            ) : null\n          }\n          {\n            this.state.txState === \"done\" ? (\n              <Box margin=\"medium\">\n                <Text weight=\"bold\">✅ Registration successful. Refresh the page!</Text>\n              </Box>\n            ) : null\n          }\n        </Box>\n      </Grommet>\n    );\n  }\n}\n\nexport default CandidateRegistration","import React from \"react\";\nimport { Grommet, Box, Button, TextInput, Heading, Text } from \"grommet\";\nimport { fetchQrCode } from \"../networkutils/networkrequests\";\n\nconst theme = {\n  global: {\n    font: {\n      family: \"Lato\",\n      size: \"14px\",\n      height: \"20px\"\n    }\n  }\n};\n\nclass VoterRegistration extends React.Component {\n  state = {\n    submitPressed: false,\n    name: \"\",\n    constituency: \"\",\n    dob: \"\",\n    walletAddress: \"\",\n    qr: null\n  };\n\n  render() {\n    if (!this.state.submitPressed) {\n      return (\n        <Grommet theme={theme} full>\n          <Box align=\"center\" flex>\n            <Heading margin=\"small\">Registration</Heading>\n            <Box margin={{ top: \"large\" }} gap=\"large\" direction=\"row\">\n              <TextInput\n                placeholder=\"Full name\"\n                value={this.state.name}\n                onChange={event => this.setState({ name: event.target.value })}\n              />\n              <TextInput\n                placeholder=\"Constituency\"\n                value={this.state.constituency}\n                onChange={event => this.setState({ constituency: event.target.value })}\n              />\n            </Box>\n            <Box margin={{ top: \"small\" }} gap=\"large\" direction=\"row\">\n              <TextInput\n                placeholder=\"DD/MM/YYYY (DOB)\"\n                value={this.state.dob}\n                onChange={event => this.setState({ dob: event.target.value })}\n              />\n              <TextInput\n                placeholder=\"Wallet Address\"\n                value={this.state.walletAddress}\n                onChange={event => this.setState({ walletAddress: event.target.value })}\n              />\n            </Box>\n            <Box margin={{ top: \"large\" }} gap=\"large\" direction=\"row\">\n              <Button\n                onClick={async () => {\n                  this.setState(() => ({ submitPressed: true }));\n                  const { qr } = await fetchQrCode(\n                    \"https://aqueous-peak-76887.herokuapp.com/voter-registration\",\n                    {\n                      name: this.state.name,\n                      dob: this.state.dob,\n                      walletAddr: this.state.walletAddress,\n                      constituency: this.state.constituency\n                    }\n                  );\n                  console.log(qr);\n                  this.setState(() => ({ qr }));\n                }}\n                primary\n                label=\"Submit\"\n                hoverIndicator=\"background\"\n              />\n            </Box>\n          </Box>\n        </Grommet>\n      );\n    } else {\n      return (\n        <Grommet theme={theme} full>\n          <Box align=\"center\" flex>\n            <Heading textAlign=\"center\"  margin=\"medium\" level={2}>Scan this QR code with the uPort app to get a digital version of your Voter ID.</Heading>\n            <img alt=\"fetching qr code\" src={`${this.state.qr}`} sityle={{ height: 250, width: 250 }} />\n            <Text size=\"medium\" weight=\"bold\">Note: PRESS REFRESH once you receive your digital ID on uPort</Text>\n          </Box>\n        </Grommet>\n      );\n    }\n  }\n}\n\nexport default VoterRegistration;\n","import React from \"react\";\nimport { Box, Heading, Button, Text } from \"grommet\";\nimport SyncLoader from \"react-spinners/SyncLoader\";\n\nconst VerificationModal = props => {\n  return (\n    <Box\n      pad=\"large\"\n      justify=\"center\"\n      align=\"center\"\n      gap=\"medium\"\n    >\n      <Heading level={2}>Scan QR with uPort App</Heading>\n      <img alt=\"fetching qr code\" src={props.qr} style={{ height: 250, width: 250, marginBottom: 12 }} />\n      <SyncLoader\n        size={10}\n        sizeUnit=\"px\"\n        loading={props.otpstate !== \"not-started\" && props.otpstate !== \"done\"}\n        color=\"#6200ea\"\n      />\n      {\n        props.otpstate === \"done\" ? (\n          <Button\n            label=\"Register your vote on blockchain\"\n            primary\n            hoverIndicator=\"background\"\n            onClick={() => props.registerVoteOnBlockchain(props.candidateWalletAddressSelected, props.voterAddress)}\n          />\n        ) : null\n      }\n      {\n        props.registerVoteOnBlockchainPressed ? (\n          <Text weight=\"bold\" margin=\"medium\">Waiting for transaction confirmation...</Text>\n        ) : null\n      }\n    </Box>\n  );\n}\n\nexport default VerificationModal;","import React from \"react\";\nimport { Box, Text, Button } from \"grommet\";\n\nconst Candidate = props => {\n  return (\n    <Box\n      flex={false}\n      background=\"white\"\n      padding=\"small\"\n      margin={{ top: \"medium\" }}\n      elevation=\"medium\"\n      width=\"48rem\"\n      round=\"medium\"\n      border={{ size: 'xxsmall', color: 'border' }}\n      align='center' justify='evenly' direction='row'\n    >\n      <Box pad=\"small\">\n        <img\n          alt=\"candidate\"\n          src={require(\"../assets/profile.jpg\")}\n          style={{ height: 100, width: 100, borderRadius: 8 }}\n        />\n      </Box>\n      <Box>\n        <Text weight=\"bold\">{props.name}</Text>\n        <Text>Political Party: {props.party}</Text>\n      </Box>\n      <Box>\n        <Button\n          label=\"Vote\"\n          onClick={() => props.onVoteButtonPressed(props.candidateAddress)}\n          primary\n          hoverIndicator=\"background\"\n        />\n      </Box>\n    </Box>\n  );\n}\n\nexport default Candidate","import React from \"react\";\nimport { Grommet, Box, Layer, Heading, InfiniteScroll, Text } from \"grommet\";\nimport Appbar from \"../components/Appbar\";\nimport VerificationModal from \"../components/VerificationModal\";\nimport { fetchVerificationQrCode, fetchGenerateOtpState } from \"../networkutils/networkrequests\";\nimport Candidate from \"../components/Candidate\";\nimport BounceLoader from \"react-spinners/BounceLoader\";\n// import SyncLoader from \"react-spinners/SyncLoader\";\n\nconst theme = {\n  global: {\n    font: {\n      family: \"Lato\",\n      size: \"14px\",\n      height: \"20px\"\n    }\n  }\n};\n\n\nclass VotingScreen extends React.Component {\n\n  state = {\n    showModal: false,\n    qr: null,\n    otpstate: \"not-started\",\n    otpValue: null,\n    candidates: [],\n    isRegistered: null,\n    userConstituency: \"\",\n    candidateWalletAddressSelected: null,\n    userHasVoted: null,\n    registerVoteOnBlockchainPressed: false\n  }\n\n  componentDidMount = async () => {\n    // const candidates = await this.props.ElectionContract.methods.getCandidateList().call();\n    const user = await this.props.ElectionContract.methods.VoterList(this.props.accounts[0]).call();\n    const isRegistered = user.isRegistered\n    this.setState(() => ({ isRegistered }));\n    if(isRegistered) {\n      // console.log(\"this is executed...\")\n      // this.setState(() => ({ isRegistered: isRegistered ? \"true\" : \"false\" }));\n      this.setState(() => ({ userConstituency: user.constituency }));\n      const candidates = await this.props.ElectionContract.methods.getCandidateList().call();\n      console.log(candidates);\n      this.setState(() => ({ candidates, userHasVoted: user.voted }));\n    }\n  }\n\n  onOtpStateChange = (otpstate) => {\n    const { otp, state } = otpstate\n    this.setState(() => ({ otpstate: state, otpValue: otp }));\n  }\n\n  onVoteButtonPressed = async (candidateWalletAddressSelected) => {\n    this.setState(() => ({ showModal: true, candidateWalletAddressSelected }));\n    const { qr } = await fetchVerificationQrCode(\"https://aqueous-peak-76887.herokuapp.com\");\n    this.setState(() => ({ qr }));\n    fetchGenerateOtpState(\"https://aqueous-peak-76887.herokuapp.com\", this.onOtpStateChange);\n  }\n\n  registerVoteOnBlockchain = async (candidateAddress, voterAddress) => {\n    this.setState({ registerVoteOnBlockchainPressed: true });\n    console.log(\"Candidate Address: \", candidateAddress);\n    console.log(\"Voter Address: \", voterAddress);\n    const response = await this.props.ElectionContract.methods.voteForCandidate(candidateAddress, voterAddress, this.state.otpValue).send({ from: this.props.accounts[0], gasPrice: 0 });\n    if(response) {\n      this.setState(() => ({ showModal: false, userHasVoted: true }));\n    }\n  }\n\n  render() {\n    console.log(this.state.otpstate);\n    if(this.state.isRegistered === false) {\n      return (\n        <Grommet theme={theme} full>\n          <Box fill align=\"center\" justify=\"center\">\n            <Heading>You need to register first!</Heading>\n          </Box>\n        </Grommet>\n      )\n    } else if(this.state.isRegistered === null) {\n      return (\n        <Grommet theme={theme} full>\n          <Box fill align=\"center\" justify=\"center\">\n            <Heading>Fetching registration details...</Heading>\n          </Box>\n        </Grommet>        \n      )\n    } else if(this.state.userHasVoted) {\n      return (\n        <Grommet theme={theme} full>\n          <Box fill align=\"center\" justify=\"center\">\n            <Heading>You have voted. Thank you 😄</Heading>\n          </Box>\n        </Grommet>\n      )\n    }\n    return (\n      <Grommet theme={theme} full>\n        <Appbar header=\"Voting Screen\" />\n        <Box\n          background=\"light-3\"\n          justify=\"start\"\n          align=\"center\"\n          style={{ wordWrap: \"anywhere\" }}\n          pad=\"medium\"\n          fill\n          overflow={{ vertical: \"scroll\" }}\n        >\n          <Box\n            width=\"100%\"\n            direction=\"row\"\n            align=\"center\"\n          >\n            <span>\n              <BounceLoader\n                sizeUnit=\"px\"\n                size={15}\n                color=\"green\"\n                loading={true}\n              />\n            </span>\n            <Text margin={{ left: \"small\" }}>Constituency: {this.state.userConstituency}</Text>\n          </Box>\n          <Box pad=\"medium\">\n            <Heading level={2}>Candidates in your constituency</Heading>\n          </Box>\n          <InfiniteScroll items={this.state.candidates.filter(candidate => candidate[1] === this.state.userConstituency)}>\n            {\n              (item, index) => (\n                <Candidate\n                  key={index}\n                  name={item[0]}\n                  party={item[2]}\n                  candidateAddress={item[5]}\n                  registerVoteOnBlockchainPressed={this.state.registerVoteOnBlockchainPressed}\n                  onVoteButtonPressed={this.onVoteButtonPressed}\n                />\n              )\n            }\n          </InfiniteScroll>\n          {/* <Button\n            label=\"Initiate voting process\"\n            // margin={{ top: \"large\" }}\n            primary\n            hoverIndicator=\"background\"\n            onClick={async () => {\n              this.setState(() => ({ showModal: true }));\n              const { qr } = await fetchVerificationQrCode(\"https://5b238b55.ngrok.io\");\n              this.setState(() => ({ qr }));\n              fetchGenerateOtpState(\"https://5b238b55.ngrok.io\", this.onOtpStateChange);\n            }}\n          /> */}\n          {\n            this.state.showModal && (\n              <Layer\n                onEsc={() => this.setState({ showModal: false, candidateWalletAddressSelected: null })}\n                onClickOutside={() => this.setState({ showModal: false, candidateWalletAddressSelected: null })}\n              >\n                <VerificationModal\n                  candidateWalletAddressSelected={this.state.candidateWalletAddressSelected}\n                  voterAddress={this.props.accounts[0]}\n                  otpstate={this.state.otpstate}\n                  qr={this.state.qr}\n                  registerVoteOnBlockchain={this.registerVoteOnBlockchain}\n                />\n              </Layer>\n            )\n          }\n        </Box>\n      </Grommet>\n    );\n  }\n}\n\nexport default VotingScreen;","import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"/*\"https://testnet2.matic.network\"*/\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;","import React from \"react\";\nimport { Grommet, Box, Button, Heading } from \"grommet\";\nimport CandidateRegistration from \"./screens/CandidateRegistration\";\nimport VoterRegistration from \"./screens/VoterRegistration\";\nimport VotingScreen from \"./screens/VotingScreen\";\nimport getWeb3 from \"./networkutils/getWeb3\";\nimport Elections from \"./builds/Elections.json\";\n\nconst theme = {\n  global: {\n    font: {\n      family: \"Lato\",\n      size: \"14px\",\n      height: \"20px\"\n    }\n  }\n};\n\nclass App extends React.Component {\n  state = {\n    showCandidateRegistration: false,\n    showVoterRegistration: false,\n    showVotingScreen: false,\n    web3: null,\n    accounts: null,\n    contract: null\n  };\n\n  componentDidMount = async () => {\n    try {\n      const web3 = await getWeb3();\n      const accounts = await web3.eth.getAccounts();\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = Elections.networks[networkId];\n      const instance = new web3.eth.Contract(\n        Elections.abi,\n        deployedNetwork && deployedNetwork.address\n      );\n      this.setState({ web3, accounts, contract: instance });\n    } catch(err) {\n      console.error(err);\n    }\n  }\n\n  render() {\n    if(this.state.web3 === null) {\n      return (\n        <Grommet theme={theme} full>\n          <Box fill align=\"center\" justify=\"center\">\n            <Heading>Loading Web3, Accounts, Contract... 🧭🔨⚙️</Heading>\n          </Box>\n        </Grommet>\n      );\n    }\n    if(this.state.showCandidateRegistration) {\n      return (\n        <CandidateRegistration/>\n      );\n    } else if(this.state.showVoterRegistration) {\n      return (\n      <VoterRegistration/>\n      );\n    } else if(this.state.showVotingScreen) {\n      return (\n        <VotingScreen\n          ElectionContract={this.state.contract}\n          accounts={this.state.accounts}\n        />\n      );\n    }\n    return (\n      <Grommet theme={theme} full>\n        <Box fill align=\"center\" justify=\"center\">\n          <Box>\n            <Heading level={2}>Let's get started!</Heading>\n          </Box>\n          <Box margin=\"small\" direction=\"row\">\n            <Box pad=\"small\">\n              <Button\n                label=\"Candidate Registration\"\n                primary\n                hoverIndicator=\"background\"\n                onClick={() => this.setState({ showCandidateRegistration: true })}\n              />\n            </Box>\n            <Box pad=\"small\">\n              <Button\n                label=\"Voter Registration\"\n                primary\n                hoverIndicator=\"background\"\n                onClick={() => this.setState({ showVoterRegistration: true })}\n              />\n            </Box>\n          </Box>\n          <Box>\n            <Box pad=\"small\">\n              <Button\n                label=\"Vote for a candidate\"\n                primary\n                hoverIndicator=\"background\"\n                onClick={() => this.setState({ showVotingScreen: true })}\n              />\n            </Box>\n          </Box>\n        </Box>\n      </Grommet>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}